/*
 * generated by Xtext 2.25.0
 */
package tools.refinery.language;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.resource.IResourceFactory;
import org.eclipse.xtext.resource.IResourceServiceProvider;

import com.google.inject.Guice;
import com.google.inject.Injector;

import tools.refinery.language.model.ProblemEMFSetup;

/**
 * Initialization support for running Xtext languages without Equinox extension
 * registry.
 */
public class ProblemStandaloneSetup extends ProblemStandaloneSetupGenerated {

	public static void doSetup() {
		new ProblemStandaloneSetup().createInjectorAndDoEMFRegistration();
	}

	@Override
	public Injector createInjectorAndDoEMFRegistration() {
		ProblemEMFSetup.doEMFRegistration();
		var xmiInjector = createXmiInjector();
		registerXmiInjector(xmiInjector);
		return super.createInjectorAndDoEMFRegistration();
	}
	
	protected Injector createXmiInjector() {
		return Guice.createInjector(new ProblemXmiRuntimeModule());
	}

	protected void registerXmiInjector(Injector injector) {
		IResourceFactory resourceFactory = injector.getInstance(IResourceFactory.class);
		IResourceServiceProvider serviceProvider = injector.getInstance(IResourceServiceProvider.class);
		
		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(ProblemEMFSetup.XMI_RESOURCE_EXTENSION, resourceFactory);
		IResourceServiceProvider.Registry.INSTANCE.getExtensionToFactoryMap().put(ProblemEMFSetup.XMI_RESOURCE_EXTENSION, serviceProvider);
	}
}
