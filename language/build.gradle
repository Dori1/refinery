apply from: "${rootDir}/gradle/xtext-common.gradle"
apply from: "${rootDir}/gradle/mwe2.gradle"

dependencies {
	testCompile "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
	testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
	testCompile "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
	testCompile "org.eclipse.xtext:org.eclipse.xtext.testing:${xtextVersion}"
	testCompile "org.eclipse.xtext:org.eclipse.xtext.xbase.testing:${xtextVersion}"
	testCompile "org.hamcrest:hamcrest:${hamcrestVersion}"
	compile "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	compile "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
	compile "org.eclipse.emf:org.eclipse.emf.ecore:${ecoreVersion}"
	compile project(':language-model')
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
	mwe2 "org.eclipse.xtext:xtext-antlr-generator:${xtextAntlrGeneratorVersion}"
	mwe2 project(':language-mwe2')
}

jar {
	from(sourceSets.main.allSource) {
		include '**/*.xtext'
	}
}

task generateXtextLanguage(type: JavaExec) {
	main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file "src/main/java/org/eclipse/viatra/solver/language/GenerateProblem.mwe2"
	inputs.file "src/main/java/org/eclipse/viatra/solver/language/Problem.xtext"
	outputs.dir "src/main/xtext-gen"
	outputs.dir "src/test/xtext-gen"
	outputs.dir "../language-ide/src/main/xtext-gen"
	outputs.dir "../language-web/src/main/xtext-gen"
	outputs.dir "../language-web/build/generated/sources/xtext"
	args += "src/main/java/org/eclipse/viatra/solver/language/GenerateProblem.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
