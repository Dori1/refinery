<?xml version="1.0" encoding="UTF-8"?>
<genmodel:GenModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:genmodel="http://www.eclipse.org/emf/2002/GenModel"
    modelDirectory="/language-model/src/main/emf-gen" creationIcons="false"
    editDirectory="/language-edit/src/main/emf-gen" editorDirectory="/org.eclipse.viatra.solver.language.model.editor/src-gen"
    modelPluginID="language-model" modelName="Problem" rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container"
    codeFormatting="true" importerID="org.eclipse.emf.importer.ecore" complianceLevel="5.0"
    copyrightFields="false" operationReflection="true" importOrganizing="true">
  <foreignModel>problem.ecore</foreignModel>
  <testsDirectory xsi:nil="true"/>
  <genPackages prefix="Problem" basePackage="org.eclipse.viatra.solver.language.model"
      disposableProviderFactory="true" ecorePackage="problem.ecore#/">
    <genEnums typeSafeEnumCompatible="false" ecoreEnum="problem.ecore#//LogicValue">
      <genEnumLiterals ecoreEnumLiteral="problem.ecore#//LogicValue/TRUE"/>
      <genEnumLiterals ecoreEnumLiteral="problem.ecore#//LogicValue/FALSE"/>
      <genEnumLiterals ecoreEnumLiteral="problem.ecore#//LogicValue/UNKNOWN"/>
      <genEnumLiterals ecoreEnumLiteral="problem.ecore#//LogicValue/ERROR"/>
    </genEnums>
    <genClasses ecoreClass="problem.ecore#//Problem">
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//Problem/nodes"/>
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//Problem/statements"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//Relation"/>
    <genClasses ecoreClass="problem.ecore#//ClassDeclaration">
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//ClassDeclaration/abstract"/>
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference problem.ecore#//ClassDeclaration/superTypes"/>
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//ClassDeclaration/referenceDeclarations"/>
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//ClassDeclaration/newNode"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//ReferenceDeclaration">
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference problem.ecore#//ReferenceDeclaration/referenceType"/>
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference problem.ecore#//ReferenceDeclaration/opposite"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//ReferenceDeclaration/containment"/>
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//ReferenceDeclaration/multiplicity"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//NamedElement">
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//NamedElement/name"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//PredicateDefinition">
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//PredicateDefinition/error"/>
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//PredicateDefinition/parameters"/>
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//PredicateDefinition/bodies"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//Parameter">
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference problem.ecore#//Parameter/parameterType"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//Variable"/>
    <genClasses ecoreClass="problem.ecore#//Conjunction">
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//Conjunction/literals"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//Literal"/>
    <genClasses ecoreClass="problem.ecore#//Atom">
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference problem.ecore#//Atom/relation"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//Atom/transitiveClosure"/>
      <genFeatures children="true" createChild="true" propertySortChoices="true" ecoreFeature="ecore:EReference problem.ecore#//Atom/arguments"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//ImplicitVariable"/>
    <genClasses ecoreClass="problem.ecore#//NegativeLiteral">
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//NegativeLiteral/atom"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//ExistentialQuantifier">
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//ExistentialQuantifier/implicitVariables"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//Assertion">
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference problem.ecore#//Assertion/relation"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//Assertion/value"/>
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//Assertion/arguments"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//Assertion/default"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//Node"/>
    <genClasses ecoreClass="problem.ecore#//ScopeDeclaration">
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//ScopeDeclaration/typeScopes"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//Statement"/>
    <genClasses ecoreClass="problem.ecore#//TypeScope">
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference problem.ecore#//TypeScope/targetType"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//TypeScope/increment"/>
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//TypeScope/multiplicity"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//Multiplicity"/>
    <genClasses ecoreClass="problem.ecore#//RangeMultiplicity">
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//RangeMultiplicity/lowerBound"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//RangeMultiplicity/upperBound"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//ExactMultiplicity">
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//ExactMultiplicity/exactValue"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//UnboundedMultiplicity"/>
    <genClasses ecoreClass="problem.ecore#//VariableOrNodeArgument">
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference problem.ecore#//VariableOrNodeArgument/variableOrNode"/>
      <genFeatures children="true" createChild="true" propertySortChoices="true" ecoreFeature="ecore:EReference problem.ecore#//VariableOrNodeArgument/singletonVariable"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//EnumDeclaration">
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//EnumDeclaration/literals"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//VariableOrNode"/>
    <genClasses ecoreClass="problem.ecore#//Constant"/>
    <genClasses ecoreClass="problem.ecore#//IntConstant">
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//IntConstant/intValue"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//RealConstant">
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//RealConstant/realValue"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//StringConstant">
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute problem.ecore#//StringConstant/stringValue"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//ConstantArgument">
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//ConstantArgument/constant"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//Argument"/>
    <genClasses ecoreClass="problem.ecore#//NodeAssertionArgument">
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference problem.ecore#//NodeAssertionArgument/node"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//AssertionArgument"/>
    <genClasses ecoreClass="problem.ecore#//ConstantAssertionArgument">
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//ConstantAssertionArgument/constant"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//NodeValueAssertion">
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference problem.ecore#//NodeValueAssertion/node"/>
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//NodeValueAssertion/value"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//UniqueDeclaration">
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference problem.ecore#//UniqueDeclaration/nodes"/>
    </genClasses>
    <genClasses ecoreClass="problem.ecore#//WildcardAssertionArgument"/>
  </genPackages>
</genmodel:GenModel>
