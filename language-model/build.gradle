apply plugin: 'java-library'
apply from: "${rootDir}/gradle/java-common.gradle"
apply from: "${rootDir}/gradle/mwe2.gradle"

dependencies {
	api "org.eclipse.emf:org.eclipse.emf.ecore:${ecoreVersion}"
	mwe2 "org.eclipse.emf:org.eclipse.emf.codegen.ecore:${ecoreCodegenVersion}"
	mwe2 "org.eclipse.emf:org.eclipse.emf.mwe.utils:${mweVersion}"
	mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.lib:${mwe2Version}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
}

sourceSets {
	main {
		java.srcDirs += ['src/main/emf-gen']
	}
}

def generateEPackage = tasks.register('generateEPackage', JavaExec) {
	mainClass = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file 'src/main/java/org/eclipse/viatra/solver/language/model/GenerateProblemModel.mwe2'
	inputs.file 'src/main/resources/model/problem.ecore'
	inputs.file 'src/main/resources/model/problem.genmodel'
	outputs.dir 'src/main/emf-gen'
	args += 'src/main/java/org/eclipse/viatra/solver/language/model/GenerateProblemModel.mwe2'
	args += '-p'
	args += "rootPath=/${projectDir}"
}

for (taskName in ['compileJava', 'processResources', 'generateEclipseSourceFolders']) {
	tasks.named(taskName) {
		dependsOn generateEPackage
	}
}

tasks.named('clean') {
	delete 'src/main/emf-gen'
}

sonarqube.properties {
	properties['sonar.exclusions'] += [
		'src/main/emf-gen/**',
	]
}

eclipse.project.natures += [
	'org.eclipse.sirius.nature.modelingproject',
	'org.eclipse.pde.PluginNature',
	'org.eclipse.xtext.ui.shared.xtextNature'
]
