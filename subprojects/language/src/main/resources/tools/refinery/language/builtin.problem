problem builtin.

abstract class node {
	refers node[] equals opposite equals
}

pred exists(node node).

% class Integer {
%     int intValue
% }
%
% class Real {
%     real realValue
% }
%
% class String {
%     string stringValue
% }
%
% enum Boolean {
%     TRUE, FALSE
% }

pred contained(node node).

pred contains(node container, node contained).

pred root(node node).

% error missingContainer(contained node) <->
%     !contains(node, _), !root(node).
%
% error tooManyContainers(contained node) <->
%     #contains(_, node) > 1
% ;
%     contains(_, node), root(node)
% ;
% 	  contains(_, node), !contained(node).
%
% error containmentCycle(node node) <->
%     contains+(node, node).
