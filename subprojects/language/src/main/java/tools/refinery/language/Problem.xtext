grammar tools.refinery.language.Problem with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "https://refinery.tools/emf/2021/Problem"

Problem:
	("problem" name=Identifier ".")?
	statements+=Statement*;

Statement:
	ClassDeclaration | EnumDeclaration | PredicateDefinition | RuleDefinition | Assertion | NodeValueAssertion |
	ScopeDeclaration |
	IndividualDeclaration;

ClassDeclaration:
	abstract?="abstract"? "class"
	name=Identifier
	("extends" superTypes+=[Relation|QualifiedName] ("," superTypes+=[Relation|QualifiedName])*)?
	("{" (referenceDeclarations+=ReferenceDeclaration ";"?)* "}" | ".");

EnumDeclaration:
	"enum"
	name=Identifier
	("{" (literals+=EnumLiteral ("," literals+=EnumLiteral)* ("," | ";")?)? "}" | ".");

EnumLiteral returns Node:
	name=Identifier;

ReferenceDeclaration:
	(containment?="contains" | "refers")?
	referenceType=[Relation|QualifiedName]
	("[" multiplicity=Multiplicity "]")?
	name=Identifier
	("opposite" opposite=[ReferenceDeclaration|QualifiedName])?;

enum PredicateKind:
	DIRECT="direct";

PredicateDefinition:
	(error?="error" "pred"? | kind=PredicateKind? "pred")
	name=Identifier
	"(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")"
	("<->" bodies+=Conjunction (";" bodies+=Conjunction)*)?
	".";

enum RuleKind:
	DIRECT="direct";

RuleDefinition:
	kind=RuleKind "rule"
	name=Identifier
	"(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")"
	(":" bodies+=Conjunction (";" bodies+=Conjunction)*
	"~>" action=Action)?
	".";

Parameter:
	parameterType=[Relation|QualifiedName]? name=Identifier;

Conjunction:
	literals+=Literal ("," literals+=Literal)*;

Action:
	actionLiterals+=ActionLiteral ("," actionLiterals+=ActionLiteral)*;

Literal:
	Atom | ValueLiteral | NegativeLiteral;

ValueLiteral:
	atom=Atom
	(refinement?=":" | "=")
	values+=LogicConstant ("|" values+=LogicConstant)*;

NegativeLiteral:
	"!" atom=Atom;

ActionLiteral:
	ValueActionLiteral | DeleteActionLiteral | NewActionLiteral;

ValueActionLiteral:
	atom=Atom
	(refinement?=":" | "=")
	value=LogicValue;

DeleteActionLiteral:
	"delete" variableOrNode=[VariableOrNode|QualifiedName];

NewActionLiteral:
	"new" variable=NewVariable;

NewVariable:
	name=Identifier;

Atom:
	relation=[Relation|QualifiedName]
	transitiveClosure?="+"?
	"(" (arguments+=Argument ("," arguments+=Argument)*)? ")";

LogicConstant:
	value=LogicValue;

Argument:
	VariableOrNodeArgument | ConstantArgument;

VariableOrNodeArgument:
	variableOrNode=[VariableOrNode|QualifiedName];

ConstantArgument:
	constant=Constant;

Assertion:
	default?="default"?
	(value=ShortLogicValue?
	relation=[Relation|QualifiedName]
	"(" (arguments+=AssertionArgument ("," arguments+=AssertionArgument)*)? ")"
	| relation=[Relation|QualifiedName]
	"(" (arguments+=AssertionArgument ("," arguments+=AssertionArgument)*)? ")"
	":" value=LogicValue)
	".";

AssertionArgument:
	NodeAssertionArgument | WildcardAssertionArgument | ConstantAssertionArgument;

NodeAssertionArgument:
	node=[Node|QualifiedName];

WildcardAssertionArgument:
	{WildcardAssertionArgument} "*";

ConstantAssertionArgument:
	constant=Constant;

enum LogicValue:
	TRUE="true" | FALSE="false" | UNKNOWN="unknown" | ERROR="error";

enum ShortLogicValue returns LogicValue:
	FALSE="!" | UNKNOWN="?";

NodeValueAssertion:
	node=[Node|QualifiedName] ":" value=Constant ".";

Constant:
	RealConstant | IntConstant | StringConstant;

IntConstant:
	intValue=Integer;

RealConstant:
	realValue=Real;

StringConstant:
	stringValue=STRING;

ScopeDeclaration:
	"scope" typeScopes+=TypeScope ("," typeScopes+=TypeScope)* ".";

TypeScope:
	targetType=[ClassDeclaration|QualifiedName]
	(increment?="+=" | "=")
	multiplicity=DefiniteMultiplicity;

Multiplicity:
	UnboundedMultiplicity | DefiniteMultiplicity;

DefiniteMultiplicity returns Multiplicity:
	RangeMultiplicity | ExactMultiplicity;

UnboundedMultiplicity:
	{UnboundedMultiplicity};

RangeMultiplicity:
	lowerBound=INT ".." upperBound=UpperBound;

ExactMultiplicity:
	exactValue=INT;

IndividualDeclaration:
	"indiv" nodes+=EnumLiteral ("," nodes+=EnumLiteral)* ".";

UpperBound returns ecore::EInt:
	INT | "*";

QualifiedName hidden():
	Identifier ("::" Identifier)*;

Identifier:
	ID | "true" | "false" | "unknown" | "error" | "class" | "abstract" | "extends" | "enum" | "pred" |
	"indiv" | "problem" | "new" | "delete" | "direct" | "rule";

Integer returns ecore::EInt hidden():
	"-"? INT;

Real returns ecore::EDouble:
	"-"? (EXPONENTIAL | INT "." (INT | EXPONENTIAL));

@Override
terminal ID:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal EXPONENTIAL:
	INT ("e" | "E") ("+" | "-")? INT;

@Override
terminal SL_COMMENT:
	('%' | '//') !('\n' | '\r')* ('\r'? '\n')?;
